import net.fabricmc.loom.configuration.providers.mappings.IntermediaryMappingsProvider
import net.fabricmc.loom.util.download.DownloadBuilder
import java.nio.file.Files
import java.nio.file.StandardCopyOption
import java.util.function.Function


plugins {
	id 'fabric-loom' version '1.3.local'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	mavenLocal()
}

loom {
	//Replace the default loom intermediary provider to the local manual one
//	var extension = LoomGradleExtension.get(getRootProject());
	var extension = project.getExtensions().getByName("loom");
	final var versionPath = extension.files.getUserCache().toPath().resolve(minecraft_version);
	def intermediaryPath = versionPath.resolve("intermediary-" + minecraft_version + ".tiny")
	if (!Files.exists(intermediaryPath)){
		throw new IOException("MITE Intermediay mapping not found")
	}
	intermediaryUrl = intermediaryPath.toString();
	intermediateMappingsProvider = new IntermediaryMappingsProvider(){
		@Override
		Property<String> getIntermediaryUrl() {
			return intermediaryUrl
		}

		@Override
		Property<Boolean> getRefreshDeps() {
			return false as Property<Boolean>
		}

		@Override
		Property<String> getMinecraftVersion() {
			def property = getProject().objects.property(String.class)
			property.set(minecraft_version)
			return property;
		}

		@Override
		Property<Function<String, DownloadBuilder>> getDownloader() {
			return null
		}

		@Override
		void provide(java.nio.file.Path tinyMappings) throws IOException{
			Files.copy(intermediaryPath, tinyMappings, StandardCopyOption.REPLACE_EXISTING);
		}
	};
}


dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	implementation("net.fabricmc:fabric-loom:1.3.local")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

}